package com.ffcs.crmd.cas.order.service.impl;

import com.ctg.itrdc.platform.common.entity.PageInfo;
import com.ctg.itrdc.platform.common.utils.type.CollectionUtils;
import com.ctg.itrdc.platform.common.utils.type.DateUtils;
import com.ctg.itrdc.platform.common.utils.type.NumberUtils;
import com.ctg.itrdc.platform.common.utils.type.StringUtils;
import com.ctg.itrdc.platform.pub.context.SessionContext;
import com.ctg.itrdc.platform.pub.util.ApplicationContextUtil;
import com.ffcs.crmd.cas.base.context.CasSessionContext;
import com.ffcs.crmd.cas.base.utils.CodeBuildUtils;
import com.ffcs.crmd.cas.base.utils.CrmClassUtils;
import com.ffcs.crmd.cas.bean.hbbean.preannouncecharge.FeeItem;
import com.ffcs.crmd.cas.constants.CasConstant;
import com.ffcs.crmd.cas.constants.IntfConstant;
import com.ffcs.crmd.cas.core.ddd.entity.impl.AbsCrmdBaseEntity;
import com.ffcs.crmd.cas.core.ddd.service.impl.AbsCrmdGenericServiceImpl;
import com.ffcs.crmd.cas.intf.api.dto.PreAnnounceChargeInDTO;
import com.ffcs.crmd.cas.intf.api.dto.PreAnnounceChargeOutDTO;
import com.ffcs.crmd.cas.intf.api.facade.ICrmdToHbFacade;
import com.ffcs.crmd.cas.order.api.dto.IntfPreOrderDTO;
import com.ffcs.crmd.cas.order.api.vo.PreSaleOrderVo;
import com.ffcs.crmd.cas.order.entity.*;
import com.ffcs.crmd.cas.order.repository.IPreSaleOrderRepository;
import com.ffcs.crmd.cas.order.service.*;
import com.ffcs.crmd.cas.order.vo.OrderOverTimeStatVo;
import com.ffcs.crmd.cas.order.vo.PreSaleOrderCountVo;
import com.ffcs.crmd.cas.order.vo.PreSaleOrderProcVo;
import com.ffcs.crmd.cas.sys.api.dto.StaffDTO;
import com.ffcs.crmd.cas.sys.api.facade.ICasSysFacade;
import com.ffcs.crmd.platform.data.utils.CrmEntityUtils;
import com.ffcs.crmd.cas.sys.entity.StaffPosition;
import com.ffcs.crmd.platform.meta.entity.AttrSpec;
import com.ffcs.crmd.platform.meta.entity.AttrValue;
import com.ffcs.crmd.platform.pub.vo.RetVo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.Timestamp;
import java.util.*;

@Service("preSaleOrderService")
public class PreSaleOrderServiceImpl extends AbsCrmdGenericServiceImpl<PreSaleOrder, Long>
		implements IPreSaleOrderService {

	@Autowired
	IPreSaleOrderRepository preSaleOrderRepository;
	@Autowired
	private IPreSaleOrderProcService procService;
	@Autowired
	private IPreSaleAcctItemService itemService;
	@Autowired
	private IPreSaleOrderPoolService orderPoolService;
	@Autowired
	private IAutoGenOrderService autoGenOrderService;
	@Autowired
	private IIsaleAcctItemService isaleAcctItemService;
	@Autowired
	private IPreSaleOrderItemService preSaleOrderItemService;
	@Autowired
	private ICrmdToHbFacade crmdToHbFacade;
	@Autowired
	private IPreSaleAcctItemService preSaleAcctItemService;
	@Autowired
	private IPreSaleOrderAttrService preSaleOrderAttrService;
	
	@Override
	public PageInfo queryPreSaleOrder(PreSaleOrderVo preSaleOrderVo) {
		return preSaleOrderRepository.queryPreSaleOrder(preSaleOrderVo);
	}

	@Override
	public List<PreSaleOrder> queryPreSaleOrderList(Map param) {
		return preSaleOrderRepository.queryPreSaleOrderList(param);
	}

	@Override
	public void submitReFee(Long preOrderId, List<AttrValue> attrValues,Long staffId) {
		// 1.生成预销售单账目项
		PreSaleAcctItem preSaleAcctItem = new PreSaleAcctItem(true);
		preSaleAcctItem.setPreOrderId(preOrderId);
		preSaleAcctItem.setShardingId(preOrderId);
		preSaleAcctItem.setStatusCd(CasConstant.PRE_SALE_ACCT_ITEM_STATUS_NO_PAY.getValue()); // 设置状态：未销帐
		preSaleAcctItem.setAcctItemType(CasConstant.PRE_SALE_ACCT_ITEM_TYPE_RE_FEE.getValue()); // 设置类型：补收款
		// 账目项编码
		AttrSpec attrSpec = CrmClassUtils.getAttrSpecByCode(CasConstant.PRE_SALE_ACCT_ITEM.getValue(),
				CasConstant.ACCT_SO_NUMBER.getValue());
		preSaleAcctItem.setAcctSoNumber(CodeBuildUtils.buildPreOrderAcctCode(attrSpec));
		preSaleAcctItem.save();
		// 2.生成预销售单项目项属性
		if (attrValues != null && attrValues.size() > 0) {
			for (AttrValue attrValue : attrValues) {
				PreSaleAcctItemAttr acctItemAttr = new PreSaleAcctItemAttr(true);
				acctItemAttr.setShardingId(preOrderId); // 分片键
				acctItemAttr.setPreAcctItemId(preSaleAcctItem.getPreAcctItemId()); // 账目项ID
				acctItemAttr.setAttrId(attrValue.getAttrId()); // 属性ID
				acctItemAttr.setAttrValue(""+NumberUtils.multiply(NumberUtils.toDouble(attrValue.getAttrValue()),100)); // 属性值
				acctItemAttr.save();
			}
		}
		// 3.新增预销售单处理过程
		PreSaleOrder preSaleOrder = this.getByIdAndShardingId(preOrderId, preOrderId);
		PreSaleOrderProc preSaleOrderProc = new PreSaleOrderProc(true);
		preSaleOrderProc.setPreOrderId(preOrderId);
		preSaleOrderProc.setShardingId(preOrderId);
		preSaleOrderProc.setStatusCd(preSaleOrder.getStatusCd()); // 设置预销售单当前的状态
		preSaleOrderProc.setAcceptTime(new Timestamp(new Date().getTime())); // 受理时间
		preSaleOrderProc.setRemark(CasConstant.REMARK_WAIT_FOR_PAY.getValue()); // 备注：补收款
		// 设置员工
		preSaleOrderProc.setStaffId(staffId);
		// 现网代码：com/ffcs/crm2/order/manager/impl/PreSaleOrderManagerImpl.java:259
		preSaleOrderProc.save();
		// 4.修改预销售单状态
		preSaleOrder.setStatusCd(CasConstant.PRE_SALE_ORDER_STATUS_CD_WAIT_FOR_PAY.getValue()); // 状态：待收费
		preSaleOrder.update();
	}

	/**
	 * 删除预受理单及相关表
	 * 
	 * @author YULIYAO 2016/1/20 return
	 */
	@Override
	public int remove(PreSaleOrder preSaleOrder) {
		// 第一张单处理内容
		if ("1".equals(preSaleOrder.getSeq() + "")) {
			// 移除P订单属性
			preSaleOrderAttrService.removeByOrderId(preSaleOrder.getPreOrderId());
			// 移除预受理处理过程
			procService.removeByOrderId(preSaleOrder.getPreOrderId());
			// 移除费用项
			itemService.removeByOrderId(preSaleOrder.getPreOrderId());
			// 移工单池记录
			this.completeOrderPool(preSaleOrder);
			// 移除P订单号关联的所有P订单记录
			this.removePreSaleOrdersByPreOrderNbr(preSaleOrder);
			// 移除普坤自动受理表
			autoGenOrderService.removeAutoGenOrder(preSaleOrder.getPreOrderNumber());
			// 移除集团销售费用
			isaleAcctItemService.removeBySerail(preSaleOrder.getPreOrderNumber());
		}
		// 移除预受理订单项
		preSaleOrderItemService.removeItemByOrderId(preSaleOrder.getPreOrderId(), preSaleOrder.getShardingId());
		return super.remove(preSaleOrder);
	}

	private int removePreSaleOrdersByPreOrderNbr(PreSaleOrder paramOrder) {
		int results = 0;
		Map param = new HashMap();
		param.put("preOrderNumber", paramOrder.getPreOrderNumber());
		List<PreSaleOrder> preSaleOrders = this.queryPreSaleOrderList(param);
		if (CollectionUtils.isNotEmpty(preSaleOrders)) {
			for (PreSaleOrder preSaleOrder : preSaleOrders) {
				if (!"1".equals(preSaleOrder.getSeq()+"")) { // 移除除了第一张P单之外的P单
					// 状态统一设置为第一张P单的状态
					preSaleOrder.setStatusCd(paramOrder.getStatusCd());
					results += remove(preSaleOrder);
				}
			}
		}
		return results;
	}

	/**
	 * 将工单池移到二表.
	 *
	 * @author chenjw 2014-9-16
	 */
	public void completeOrderPool(PreSaleOrder preSaleOrder) {
		// 竣工或者撤销竣工
		if (IntfConstant.PRE_SALE_ORDER_STATUS_CD_COMPLETE.getValue().equals(preSaleOrder.getStatusCd())
				|| IntfConstant.PRE_SALE_ORDER_STATUS_CD_CANCEL_COMPLETE.getValue()
						.equals(preSaleOrder.getStatusCd())) {
			PreSaleOrderPool orderPool = orderPoolService.getPreSaleOrderPoolByOrderId(preSaleOrder.getPreOrderId());
			if (orderPool != null) {
				orderPool.setStatusCd(IntfConstant.PRE_POOL_STATUS_CD_DEALED.getValue());
				orderPool.setStatusDate(new Timestamp(new Date().getTime()));
				orderPool.remove();
			}
		}
	}

	@Override
	public List<PreSaleOrderHis> queryPreSaleOrderHisList(Map param) {
		return preSaleOrderRepository.queryPreSaleOrderHisList(param);
	}

	@Override
	public List<PreSaleOrderItem> queryPreSaleOrderItems(Long preSaleOrderId) {
		return preSaleOrderItemService.queryPreSaleOrderItems(preSaleOrderId);
	}

	@Override
	public PreSaleOrder queryFirstPreOrderByOrderNumber(String preOrderNumber) {
		PreSaleOrder preSaleOrder = null;
		Map param = new HashMap();
		param.put("preOrderNumber", preOrderNumber);
		param.put("seq", 1L);
		List<PreSaleOrder> preSaleOrders = preSaleOrderRepository.queryPreSaleOrderList(param);
		if (preSaleOrders != null && preSaleOrders.size() > 0) {
			preSaleOrder = preSaleOrders.get(0);
		}
		return preSaleOrder;
	}

	@Override
	public PreSaleOrderHis queryFirstPreSaleOrderHisByOrderNumber(String preOrderNumber) {
		PreSaleOrderHis preSaleOrder = null;
		Map param = new HashMap();
		param.put("preOrderNumber", preOrderNumber);
		param.put("seq", 1L);
		List<PreSaleOrderHis> preSaleOrders = preSaleOrderRepository.queryPreSaleOrderHisList(param);
		if (preSaleOrders != null && preSaleOrders.size() > 0) {
			preSaleOrder = preSaleOrders.get(0);
		}
		return preSaleOrder;
	}

	/**
	 * 查询轮询泉州工单池自动发送
	 * 
	 * @param procCount
	 * @param model
	 * @param perSize
	 * @return
	 */
	@Override
	public List<IntfPreOrder> queryIntfOrderWaitSent(int procCount, int model, int perSize) {
		Map params = new HashMap();
		// 工单池自动发送设值
		if (procCount > 0) {
			params.put("procCount", procCount);
			params.put("model", model);
		}
		// 查询条数
		params.put("perSize", perSize);
		// 状态
		List statusList = new ArrayList();
		statusList.add("70A");
		statusList.add("70E");
		statusList.add("70F");
		params.put("statusCdList", statusList);
		// 下次处理时间 小于
		params.put("nextDealTimeEnd", DateUtils.formatDate(new Date(), "yyyy-MM-dd hh:mm:ss"));
		// 处理数 小于
		params.put("dealNumEnd", 3);

		return preSaleOrderRepository.queryListByName("preSaleOrderRepository.queryIntfOrder", IntfPreOrderDTO.class,
				params);
	}

	/**
	 * 查询同编码比当前对象ID小的数据，返回最小的id
	 * 
	 * @author YULIYAO 2016/3/11 return
	 */
	@Override
	public List<IntfPreOrderDTO> queryIntfPreOrder(Map param) {
		return preSaleOrderRepository.queryListByName("preSaleOrderRepository.queryIntfOrder", IntfPreOrderDTO.class,
				param);
	}

	/**
	 * 查询超时统计
	 * 
	 * @author YULIYAO 2016/3/10 return
	 */
	@Override
	public List<OrderOverTimeStatVo> queryOrderOverTimeStat(int procCount, int model) {
		return preSaleOrderRepository.queryOrderOverTimeStat(procCount, model);
	}

	@Override
	public String getLastCustOrderIdByPreOrderNbr(String preOrderNumber) {
		String result = "";
		Map param = new HashMap();
		param.put("preOrderNumber", preOrderNumber);
		PreSaleOrder preSaleOrder = preSaleOrderRepository.getLastCustOrderIdByPreOrderNbr(param);
		if (preSaleOrder != null) {
			result += StringUtils.strnull(preSaleOrder.getExtCustOrderId());
		}
		return result;
	}

	@Override
	public PreSaleOrder getPreSaleOrderByExtOrderId(Long extCustOrderId) {
		PreSaleOrder preSaleOrder = null;
		Map map = new HashMap();
		map.put("extCustOrderId", extCustOrderId);
		List<PreSaleOrder> lists = this.queryPreSaleOrderList(map);
		if (lists != null && lists.size() > 0) {
			preSaleOrder = lists.get(0);
			if (!"1".equals(StringUtils.strnull(preSaleOrder.getSeq()))) {
				preSaleOrder = this.queryFirstPreOrderByOrderNumber(preSaleOrder.getPreOrderNumber());
			}
		}
		return preSaleOrder;
	}
	@Override
	public PreSaleOrder getSelfPreSaleOrderByExtOrderId(Long extCustOrderId) {
		PreSaleOrder preSaleOrder = null;
		Map map = new HashMap();
		map.put("extCustOrderId", extCustOrderId);
		List<PreSaleOrder> lists = this.queryPreSaleOrderList(map);
		if (lists != null && lists.size() > 0) {
			preSaleOrder = lists.get(0);
		}
		return preSaleOrder;
	}

	@Override
	public AbsCrmdBaseEntity getPreSaleOrderHisByExtOrderId(Long extCustOrderId) {
		AbsCrmdBaseEntity preSaleOrder = null;
		preSaleOrder = getPreSaleOrderByExtOrderId(extCustOrderId);
		if (preSaleOrder == null) {
			Map map = new HashMap();
			map.put("extCustOrderId", extCustOrderId);
			List<PreSaleOrderHis> hisList = this.queryPreSaleOrderHisList(map);
			if (hisList != null && hisList.size() > 0) {
				preSaleOrder = hisList.get(0);
				if (preSaleOrder != null && !"1".equals(((PreSaleOrderHis) preSaleOrder).getSeq()+"")) {
					preSaleOrder = queryFirstPreSaleOrderHisByOrderNumber(
							((PreSaleOrderHis) preSaleOrder).getPreOrderNumber());
				}
			}
		}
		return preSaleOrder;
	}

	@Override
	public RetVo announceCharge(PreSaleOrder preSaleOrder, Long reqType) {
		RetVo retVo = new RetVo();
		if (NumberUtils.toLong(IntfConstant.ANNOUNCE_CHARGE_REQ_TYPE_0.getValue()) != reqType
				&& NumberUtils.toLong(IntfConstant.ANNOUNCE_CHARGE_REQ_TYPE_2.getValue()) != reqType
				&& NumberUtils.toLong(IntfConstant.ANNOUNCE_CHARGE_REQ_TYPE_3.getValue()) != reqType) {
			retVo.setResult(false);
			retVo.setMsgTitle("帐务处理请求类型 不合法");
			return retVo;
		}
		try {
			PreAnnounceChargeInDTO preAnnounceChargeInDTO = getPreAnnounceChargeInPut(preSaleOrder, reqType);
			retVo = crmdToHbFacade.announceCharge(preAnnounceChargeInDTO, reqType);
		} catch (Exception e) {
			retVo.setResult(false);
			retVo.setMsgTitle(e.getMessage());
			return retVo;
		}
		// 处理成功，记录账务处理表示
		if (retVo.getResult() && retVo.getObject() != null
				&& "0".equals(((PreAnnounceChargeOutDTO) retVo.getObject()).getResult())) {
			AttrSpec attrSpec = CrmClassUtils.getAttrSpecByCode(PreSaleOrder.class.getSimpleName(),
					"preAnnounceChargeFlag");
			if (attrSpec != null) {
				PreSaleOrderAttr attr = new PreSaleOrderAttr(true);
				attr.setPreOrderId(preSaleOrder.getPreOrderId());
				attr.setShardingId(preSaleOrder.getPreOrderId());
				attr.setAttrId(attrSpec.getAttrId());
				attr.setAttrValue("1");
				IPreSaleOrderAttrService preSaleOrderAttrService = ApplicationContextUtil
						.getBean("preSaleOrderAttrService");
				preSaleOrderAttrService.save(attr);
			}
		}
		return retVo;
	}

	private PreAnnounceChargeInDTO getPreAnnounceChargeInPut(PreSaleOrder preSaleOrder, Long reqType) throws Exception {
		PreAnnounceChargeInDTO preAnnounceChargeInDTO = new PreAnnounceChargeInDTO();
		preAnnounceChargeInDTO.setReqType(reqType);
		ICasSysFacade casSysFacade = ApplicationContextUtil.getBean("CasSysFacade");
		// 获取C3区域的areaNbr
		preAnnounceChargeInDTO.setLatnId(casSysFacade.getLatnIdByAreaId(preSaleOrder.getAreaId()));
		// 岗位ID，先从session中获取岗位，如果没有则默认岗位
		String staffPositionId = StringUtils.isNullOrEmpty(SessionContext.getValue("staffPosionId"))
				? CasConstant.INTF_STAFF_POSITION_ID.getValue()
				: StringUtils.strnull(SessionContext.getValue("staffPosionId"));
		preAnnounceChargeInDTO.setStaffPositionId(NumberUtils.nullToLongZero(staffPositionId));

		preAnnounceChargeInDTO.setPreCustSoNum(preSaleOrder.getPreOrderNumber());
		// 客户名称获取
		preAnnounceChargeInDTO.setCustName(preSaleOrder.getCustName());

		AttrSpec attrSpec = CrmClassUtils.getAttrSpecByCode("PreAcceptanceContext", "accNbr");

		List<PreSaleOrderItem> items = preSaleOrderItemService.queryPreSaleOrderItems(preSaleOrder.getId());
		PreSaleOrderItem accNbrItem = null;
		for (PreSaleOrderItem item : items) {
			if (attrSpec.getAttrId().equals(item.getAttrId())) {
				accNbrItem = item;
				break;
			}
		}

		// 是否有业务号码或者证件号码
		boolean hasAccNbrOrCertNbr = false;

		if (accNbrItem != null) {
			preAnnounceChargeInDTO.setAccNbr(accNbrItem.getAttrValue());
			hasAccNbrOrCertNbr = true;
		} else {
			// TODO:如果没有采集业务号码，则捞证件号码
			String certNbr = null;// this.getCustCertNbr();
			if (!StringUtils.isNullOrEmpty(certNbr)) {
				preAnnounceChargeInDTO.setAccNbr(certNbr);
				hasAccNbrOrCertNbr = true;
			}
		}
		/*
		 * if (!hasAccNbrOrCertNbr) { throw new Exception("未采集业务号码或者证件号码！"); }
		 */
		PreSaleAcctItem paramItem = new PreSaleAcctItem();
		paramItem.setPreOrderId(preSaleOrder.getPreOrderId());
		paramItem.setShardingId(preSaleOrder.getPreOrderId());
		IPreSaleAcctItemService preSaleAcctItemService = ApplicationContextUtil.getBean("preSaleAcctItemService");
		List<PreSaleAcctItem> acctItems = preSaleAcctItemService.queryPreSaleAcctItem(paramItem);
		// 正常受理、撤销，需要把算费产生的账目信息传给计费
		if (IntfConstant.ANNOUNCE_CHARGE_REQ_TYPE_0.getValue().equals(reqType + "")) {

			for (PreSaleAcctItem acctItem : acctItems) {
				if (IntfConstant.PRE_SALE_ACCT_ITEM_TYPE_NORMAL.getValue().equals(acctItem.getAcctItemType())
						&& IntfConstant.PRE_SALE_ACCT_ITEM_STATUS_NO_PAY.getValue().equals(acctItem.getStatusCd())) {
					for (FeeItem item : convertAcctItemToIntf(acctItem)) {
						preAnnounceChargeInDTO.addFeeItem(item);
					}
				}
			}

		} else if (IntfConstant.ANNOUNCE_CHARGE_REQ_TYPE_3.getValue().equals(reqType + "")) {
			for (PreSaleAcctItem acctItem : acctItems) {
				if (IntfConstant.PRE_SALE_ACCT_ITEM_TYPE_RE_FEE.getValue().equals(acctItem.getAcctItemType())
						&& IntfConstant.PRE_SALE_ACCT_ITEM_STATUS_NO_PAY.getValue().equals(acctItem.getStatusCd())) {
					for (FeeItem item : convertAcctItemToIntf(acctItem)) {
						preAnnounceChargeInDTO.addFeeItem(item);
					}
				}
			}
		} else if (IntfConstant.ANNOUNCE_CHARGE_REQ_TYPE_2.getValue().equals(reqType + "")) {

		}
		return preAnnounceChargeInDTO;
	}

	/**
	 *
	 * @param acctItem
	 * @return
	 */
	List<FeeItem> convertAcctItemToIntf(PreSaleAcctItem acctItem) {
		List<FeeItem> list = new ArrayList<FeeItem>();
		Map param = new HashMap();
		param.put("preAcctItemId", acctItem.getId());
		param.put("shardingId", acctItem.getShardingId());
		IPreSaleAcctItemAttrService attrRepository = ApplicationContextUtil.getBean("preSaleAcctItemAttrService");
		List<PreSaleAcctItemAttr> attrs = attrRepository.queryPreSaleAcctItemAttr(param);
		if (attrs != null && attrs.size() > 0) {
			for (PreSaleAcctItemAttr attr : attrs) {
				FeeItem item = new FeeItem();
				AttrSpec attrSpec = CrmClassUtils.getAttrSpecById(attr.getAttrId());

				item.setFeeItemName(attrSpec.getAttrName());
				item.setAmount(NumberUtils.nullToDoubleZero(attr.getAttrValue()).longValue());
				if (IntfConstant.PRE_ACCT_ATTR_SPEC_ID.getValue().equals(attrSpec.getAttrId()+"")) {
					item.setFeeItemClass(IntfConstant.PRE_SALE_ACCT_ITEM_PRINT_VOUCHER.getValue());
				} else if (IntfConstant.CASH_ACCT_ATTR_SPEC_ID.getValue().equals(attrSpec.getAttrId()+"")) {
					item.setFeeItemClass(IntfConstant.PRE_SALE_ACCT_ITEM_PRINT_INVOICE.getValue());
				} else {
					item.setFeeItemClass(IntfConstant.PRE_SALE_ACCT_ITEM_PRINT_NONE.getValue());
				}
				list.add(item);
			}
		}
		return list;
	}

	@Override
	public void savePreSaleOrderForReSend(PreSaleOrder preSaleOrder, PreSaleOrderPool orderPool,
			List<PreSaleOrderAttr> attrs, List<PreSaleOrderProcVo> vos, StaffDTO staffDTO) {
		if (preSaleOrder != null) {
			IPreSaleOrderProcService preSaleOrderProcService = ApplicationContextUtil
					.getBean("preSaleOrderProcService");
			preSaleOrderProcService.createPreSaleOrderProc(preSaleOrder, 1010L, vos, staffDTO);
		}
		if (orderPool != null) {
			// edit by laiyongmin 2016-03-30 crm00073381 orderPool.save() 改
			// .update();
			orderPool.update();
		}
		if (attrs != null && attrs.size() > 0) {
			for (PreSaleOrderAttr attr : attrs) {
				attr.save();
			}
		}
	}

	public void savePreForCompletePayment(PreSaleOrder preSaleOrder, List<PreSaleAcctItem> items,
			List<PreSaleOrderAttr> attrsForSave, List<PreSaleOrderAttr> attrsForRemove, StaffDTO staffDTO) {
		if (preSaleOrder != null) {
			preSaleOrder.update();
		}
		if (items != null && items.size() > 0) {
			for (PreSaleAcctItem item : items) {
				item.update();
			}
		}
		if (attrsForSave != null && attrsForSave.size() > 0) {
			for (PreSaleOrderAttr attr : attrsForSave) {
				attr.save();
			}
		}
		if (attrsForRemove != null && attrsForRemove.size() > 0) {
			for (PreSaleOrderAttr attr : attrsForRemove) {
				attr.remove();
			}
		}
		// 创建预受理处理过程并保存
		IPreSaleOrderProcService procService = ApplicationContextUtil.getBean("preSaleOrderProcService");
		procService.createPreSaleOrderProc(preSaleOrder,
				NumberUtils.toLong(IntfConstant.PRE_PROC_EVENT_ID_PAYED.getValue()), null, staffDTO);
	}

	@Override
	public void savePreForNormalCommit(PreSaleOrder preSaleOrder, PreSaleOrderPool orderPool,
			PreSaleOrder newPreSaleOrder, StaffDTO staffDTO) {
		if (preSaleOrder != null) {
			preSaleOrder.update();
			// 全部受理保存预受理处理过程
			if (IntfConstant.PRE_SALE_ORDER_STATUS_CD_ON_WAY.getValue().equals(preSaleOrder.getStatusCd())) {
				if (staffDTO != null && staffDTO.getStaffId() != null) {
					IPreSaleOrderProcService preSaleOrderProcService = ApplicationContextUtil
							.getBean("preSaleOrderProcService");
					preSaleOrderProcService.createPreSaleOrderProc(preSaleOrder, 1011L, null, staffDTO);
				}
			}
		}
		if (orderPool != null) {
			orderPool.update();
		}
		if (newPreSaleOrder != null) {
			newPreSaleOrder.save();
		}
	}

	@Override
	public void removePreForCancelComplete(PreSaleOrder preSaleOrder, StaffDTO staffDTO ,List<PreSaleOrderProcVo> preSaleOrderProcVos) {
		if (preSaleOrder != null) {
			this.remove(preSaleOrder);
			if (staffDTO != null && staffDTO.getStaffId() != null) {
				IPreSaleOrderProcHisService preSaleOrderProcHisService = ApplicationContextUtil
						.getBean("preSaleOrderProcHisService");
				preSaleOrderProcHisService.createPreSaleOrderProcHis(preSaleOrder, 1002L, preSaleOrderProcVos, staffDTO);
			}
		}
	}

	@Override
	public void savePreForCancelComplete(PreSaleOrder preSaleOrder, PreSaleOrderPool orderPool, StaffDTO staffDTO, List<PreSaleOrderProcVo> preSaleOrderProcVos) {
		if (preSaleOrder != null) {
			preSaleOrder.update();
			if (staffDTO != null && staffDTO.getStaffId() != null) {
				IPreSaleOrderProcService preSaleOrderProcService = ApplicationContextUtil
						.getBean("preSaleOrderProcService");
				preSaleOrderProcService.createPreSaleOrderProc(preSaleOrder, 1012L, preSaleOrderProcVos, staffDTO);
			}
		}
		if (orderPool != null) {
			orderPool.update();
		}
	}

	/**
	 * 查询已竣工的预受理单，供轮洵调用
	 * 
	 * @author YULIYAO 2016/4/1 return
	 */
	@Override
	public List<PreSaleOrder> queryCompleteOrderAuto(Map map) {
		return preSaleOrderRepository.queryListByName("preSaleOrderRepository.queryCompleteOrderAuto",
				PreSaleOrder.class, map);
	}

	/**
	 * 根据销售员工/销售团队查询回退单列表
	 * 
	 * @author YULIYAO 2016/4/6 return
	 */
	@Override
	public PageInfo queryReturnList(Map param, int currentPage, int perPageNum) {
		return preSaleOrderRepository.queryPageInfoByName("preSaleOrderRepository.queryReturnList", PreSaleOrder.class,
				param, currentPage, perPageNum);
	}

	/**
	 * 集团单省内缴费归档处理
	 * 
	 * @author YULIYAO 2016/4/7 return
	 */
	public PageInfo queryCompleteGroupOrderAuto(int model, int procCount, int perSize) {
		Map map = new HashMap();
		if (procCount > 0) {
			map.put("model", model);
			map.put("procCount", procCount);
		}
		return preSaleOrderRepository.queryPageInfoByName("preSaleOrderRepository.queryCompleteGroupOrderAuto",
				PreSaleOrder.class, map, 1, perSize);
	}

	@Override
	public PageInfo getPreOrderByDevStaffAndDevTeam(String saleStaffId, String saleOrgId, String statusCd,
			String beginDate, String endDate, int currentPage, int perPageNum) {
		return preSaleOrderRepository.getPreOrderByDevStaffAndDevTeam(saleStaffId, saleOrgId, statusCd, beginDate,
				endDate, currentPage, perPageNum);
	}

	@Override
	public PageInfo getHisPreOrderByDevStaffAndDevTeam(String saleStaffId, String saleOrgId, String statusCd,
			String beginDate, String endDate, int currentPage, int perPageNum) {
		return preSaleOrderRepository.getHisPreOrderByDevStaffAndDevTeam(saleStaffId, saleOrgId, statusCd, beginDate,
				endDate, currentPage, perPageNum);
	}

	@Override
	public Map<String, Object> getPreOrderStatusAndStatusNumber(String saleStaffId, String saleOrgId,
			String beginDate, String endDate) {
		// 统计1表
		List<PreSaleOrderCountVo> vos = preSaleOrderRepository.qryPreOrderStatusAndNumGroupByStatus(saleStaffId,
				saleOrgId, beginDate, endDate);
		// 统计2表
		List<PreSaleOrderCountVo> hisVos = preSaleOrderRepository.qryHisPreOrderStatusAndNumGroupByStatus(saleStaffId,
				saleOrgId, beginDate, endDate);
		Map<String, Object> map = new HashMap<String, Object>();
		
		for(PreSaleOrderCountVo vo : vos){
			map.put(vo.getStatusCd(), vo.getPreOrderNum());
		}
		for(PreSaleOrderCountVo hisVo : hisVos){
			if(map.containsKey(hisVo.getStatusCd())){
				Long num = NumberUtils.nullToLongZero(map.get(hisVo.getStatusCd()))+hisVo.getPreOrderNum();
				map.put(hisVo.getStatusCd(), num);
			}else{
				map.put(hisVo.getStatusCd(), hisVo.getPreOrderNum());
			}
		}
		// 返回合并数据
		return map;
	}
	@Override
	public void savePreSaleOrderForReturn(PreSaleOrder preSaleOrder,
			PreSaleOrderPool orderPool, StaffDTO staffDTO,
			List<PreSaleOrderProcVo> procVos, Long eventId) {
		if (orderPool != null) {
			orderPool.update();
		}
		if (preSaleOrder != null) {
			if (staffDTO != null && staffDTO.getStaffId() != null) {
				IPreSaleOrderProcService preSaleOrderProcService = ApplicationContextUtil
						.getBean("preSaleOrderProcService");
				preSaleOrderProcService.createPreSaleOrderProc(preSaleOrder, eventId, procVos, staffDTO);
			}
		}
	}
	@Override
	public void saveCancelPreOrder(PreSaleOrder preSaleOrder,
			String cancelFlag, StaffDTO staffDTO, Long staffPositionId,
			String cancelReason, Long amount) {
		if (preSaleOrder != null) {
			// P订单标识为已结单
			preSaleOrder.setIfEnd("1");
			// 1表示撤销P订单
			if ("1".equals(cancelFlag)) {
				// P订单设置为已撤销
				preSaleOrder.setStatusCd(IntfConstant.PRE_SALE_ORDER_STATUS_CD_CANCEL_COMPLETE.getValue());
				PreSaleAcctItem paramItem = new PreSaleAcctItem();
				paramItem.setPreOrderId(preSaleOrder.getPreOrderId());
				paramItem.setShardingId(preSaleOrder.getPreOrderId());
				IPreSaleAcctItemService preSaleAcctItemService = ApplicationContextUtil.getBean("preSaleAcctItemService");
				List<PreSaleAcctItem> acctItems = preSaleAcctItemService.queryPreSaleAcctItem(paramItem);
				// 预受理费用项标识为已退费
				if (acctItems != null && acctItems.size() > 0) {
					for (PreSaleAcctItem acctItem : acctItems) {
						if (IntfConstant.PRE_SALE_ACCT_ITEM_STATUS_PAY.getValue().equals(acctItem.getStatusCd())) {
							acctItem.setStatusCd(IntfConstant.PRE_SALE_ACCT_ITEM_STATUS_REPAY.getValue());
							acctItem.update();
						}
					}
				}
				this.remove(preSaleOrder);
				// 保存预受理处理过程
				List<PreSaleOrderProcVo> vos = new ArrayList<>();
				PreSaleOrderProcVo vo = new PreSaleOrderProcVo();
				vos.add(vo);
				vo.setAttrId(0L);
				vo.setAttrDesc(cancelReason);
				vo.setAttrValue(cancelReason);
				
				IPreSaleOrderProcHisService preSaleOrderProcHisService = ApplicationContextUtil
						.getBean("preSaleOrderProcHisService");
				preSaleOrderProcHisService.createPreSaleOrderProcHis(preSaleOrder, 1006L, vos, staffDTO);
				
				// 保存退费员工
				savePreSaleOrderAttrHis(preSaleOrder.getId(), "preSalePayStaff", staffPositionId + "");
			} else { // 其他情况不撤销P订单
				preSaleOrder.update();
				// 保存退费员工
				if (amount != null && amount > 0 && staffPositionId != null) {
					savePreSaleOrderAttr(preSaleOrder.getId(), "preSalePayStaff", staffPositionId + "");
				}
			}
		}
	}
	/**
	 * 创建并保存P订单属性.
	 * 
	 * @param javaCode
	 * @param attrValue
	 */
	private void savePreSaleOrderAttr(Long preOrderId, String javaCode, String attrValue) {
		if (preOrderId != null && !StringUtils.isNullOrEmpty(javaCode) && !StringUtils.isNullOrEmpty(attrValue)) {
			PreSaleOrderAttr attr = new PreSaleOrderAttr(true);
			attr.setPreOrderId(preOrderId);
			attr.setShardingId(preOrderId);
			Long attrId = CrmClassUtils.getAttrSpecByCode(PreSaleOrder.class.getSimpleName(), javaCode) != null
							? CrmClassUtils.getAttrSpecByCode(PreSaleOrder.class.getSimpleName(),
									javaCode).getId()
							: 0L;
			attr.setAttrId(attrId);
			attr.setAttrValue(attrValue);
			attr.save();
		}
	}
	/**
	 * 创建并保存P订单历史属性.
	 * 
	 * @param preOrderId
	 * @param javaCode
	 * @param attrValue
	 */
	private void savePreSaleOrderAttrHis(Long preOrderId, String javaCode, String attrValue) {
		if (preOrderId != null && !StringUtils.isNullOrEmpty(javaCode) && !StringUtils.isNullOrEmpty(attrValue)) {
			PreSaleOrderAttrHis attrHis = new PreSaleOrderAttrHis();
			PreSaleOrderAttr attr = new PreSaleOrderAttr(true);
			attrHis.setHisId(CrmEntityUtils.getSeq("SEQ_PRE_SALE_ORDER_ATTR_HIS_ID"));
			attrHis.setPreOrderAttrId(attr.getId());
			attrHis.setPreOrderId(preOrderId);
			attrHis.setShardingId(preOrderId);
			Long attrId = CrmClassUtils.getAttrSpecByCode(PreSaleOrder.class.getSimpleName(), javaCode) != null
							? CrmClassUtils.getAttrSpecByCode(PreSaleOrder.class.getSimpleName(),
									javaCode).getId()
							: 0L;
			attrHis.setAttrId(attrId);
			attrHis.setAttrValue(attrValue);
			attrHis.save();
		}
	}

	@Override
	public void cancelOrderForAcctItem(PreSaleOrder preSaleOrder, String msg) {
		preSaleAcctItemService.cancelOrderForAcctItem(preSaleOrder);
		
		if (!StringUtils.isNullOrEmpty(preSaleOrder.getStatusCd()) && !IntfConstant.PRE_SALE_ORDER_STATUS_CD_CANCEL_COMPLETE.getValue().equals(preSaleOrder.getStatusCd())) {
            PreSaleOrderProc preSaleOrderProc = new PreSaleOrderProc(true);
            preSaleOrderProc.setPreOrderId(preSaleOrder.getPreOrderId());
            preSaleOrderProc.setShardingId(preSaleOrder.getPreOrderId());
            // 如果缴费前有保存缴费员工，则设置 - chenjw 20140606 crm00055635
            Long payStaffId = this.getPreSalePayStaffIdByOrder(preSaleOrder);
            if (payStaffId != null) {
            	preSaleOrderProc.setStaffId(payStaffId);
            } else {
            	preSaleOrderProc.setStaffId(CasSessionContext.getContext().getStaffId());
            }
            preSaleOrderProc.setAcceptTime(new Timestamp(new Date().getTime()));
            preSaleOrderProc.setStatusCd(preSaleOrder.getStatusCd());
            preSaleOrderProc.setRemark(msg);
            preSaleOrderProc.save();
        }
        
		preSaleOrder.setStatusCd(IntfConstant.PRE_SALE_ORDER_STATUS_CD_CANCEL_COMPLETE.getValue());
	}
	
	/**
     * 通过纵表属性“预受理缴费员工岗位”获取员工ID.
     * 
     * @param preSaleOrder
     * @return
     * @author chenjw
     * 2014-6-6
     */
    public Long getPreSalePayStaffIdByOrder(PreSaleOrder preSaleOrder) {
    	if (preSaleOrder != null) {
    		AttrSpec attrSpec = CrmClassUtils.getAttrSpecByCode(PreSaleOrder.class.getSimpleName(), "preSalePayStaff");
    		if (attrSpec != null) {
    			PreSaleOrderAttr preSaleOrderAttr = preSaleOrderAttrService.getByOrderAndAttrId(preSaleOrder.getPreOrderId(),
    					attrSpec.getAttrId());
    			if (preSaleOrderAttr != null) {
    				StaffPosition sp = StaffPosition.repository().getById(
        					NumberUtils.nullToLongZero(preSaleOrderAttr.getAttrValue()));
    				if (sp != null && sp.getStaffId() != null) {
    					return sp.getStaffId();
        			}
    			}
    		}
    	}
    	return null;
    }
	
}
